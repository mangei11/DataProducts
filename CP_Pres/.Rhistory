fit$coef
sumcoef <- summary(fit)$coefficients
sumcoef
predict(fit, newdata=data.frame(mean(mtcars$wt)), interval=("confidence"))
predict(fit, newdata=mean(mtcars$wt), interval=("confidence"))
predict(fit, newdata=c(mean(mtcars$wt)), interval=("confidence"))
mean(mtcars$weight)
mean(mtcars$wt)
predict(fit, newdata=data.frame(c(mean(mtcars$wt))), interval=("confidence"))
?predict
data.frame(c(mean(mtcars$wt)))
fit<-lm(mtcars$mpg ~ mtcars$wt)
predict(fit, newdata=data.frame(c(mean(mtcars$wt))), interval=("confidence"))
y <- mtcars$mpg
x <- mtcars$wt
fit <- lm(y ~ x)
predict(fit,newdata=data.frame(mean(mtcars$wt))))
predict(fit,newdata=data.frame(mean(mtcars$wt)))
predict(fit,newdata=30,interval=("confidence"))
predict(fit,newdata=c(30),interval=("confidence"))
predict(fit,newdata=data.frame(c(30)),interval=("confidence"))
mean(mtcars$wt)
m <- mean(mtcars$wt)
fit
predict(fit, newdata=data.frame(c(m)))
new <- data.frame(x=m)
new
predict(fit, newdata=data.frame(x=m))
predict(fit, newdata=data.frame(x=m), interval=("confidence"))
?mtcars
predict(fit, newdata=data.frame(x=3), interval=("prediction"))
x <- mtcars$wt/2
fit <- lm(y ~ x)
summary(fit)
sumcoef <- summary(fit)$coefficients
sumcoef
sumcoef[2,1]+c(-1,1)*qt(0.975,fit$df)*sumcoef[2,2]
x<-mtcars$wt
fit <- lm(y~x)
summary(fit)
summary(fit)$sigma
ybar <- mean(y)
sum((y-ybar)^2)
sst <- sum((y-ybar)^2)
e <-resid(fit)
std(e)
sd(e)
sse<-sum(e^2)
sse
sse/sst
swirl()
fit <- lm(child~parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst<-var(est())
varEst<-var(est)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild, varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
q
q()
library(mass)
library(Mass)
library(MASS+)
library(MASS)
?shuttle
str(shuttle)
glm1 <- glm(use ~ wind, family="binomial")
glm1 <- glm(use ~ wind, family="binomial",data=shuttle)
summary(glm1)
glm1$coef
exp(glm1$coef)
glm1 <- glm(use ~ wind+magn, family="binomial",data=shuttle)
exp(glm1$coef)
glm1 <- glm(use ~ magn+ wind, family="binomial",data=shuttle)
exp(glm1$coef)
glm1 <- glm(use ~ wind, family="binomial",data=shuttle)
exp(glm1$coef)
exp(glm1$coef)[2]
1/exp(glm1$coef)[2]
glm1 <- glm(use ~ I(1-wind), family="binomial",data=shuttle)
str(InsectSprays)
pois1 <- glm(count ~ spray, family="poisson")
pois1 <- glm(count ~ spray, family="poisson", data=InsectSprays)
summary(pois1)
pois1$coeff
1/pois1$coeff[2]
1/exp(pois1$coeff[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- c(0)
splineTerms <- sapply(knots, function(knot)(x > knot)*(x-knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
xMat
yhat <- predict(lm(y ~ xMat-1))
fit <-lm(y ~ xMat-1)
summary(fit)
plot(x,y, frame=FALSE, pch=21, bg = “lightblue”, cex=2)
lines(x, yhat, col=”red”, lwd=2)
plot(x,y, frame=FALSE, pch=21, bg = “lightblue”, cex=2)
plot(x,y, frame=FALSE, pch=21, bg = "lightblue", cex=2)
plot(x,y, frame=FALSE, pch=21, bg = "lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
?step
q()
library(AppliedPredictiveModeling)
installed.packages()
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
inTrain <- createDataPartition(y-segmentationOriginal$Case, p=0.7,list=FALSE)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
modFit$finalModel
nd <- data.frame(TotalIntench2=23000, FiberWidthCh1=10,PerimStatusCh1=2)
predict(modFit,nd)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive=olive[,-1]
str(olive)
?train
?tree
install.packages("tree")
library(tree)
?tree
oltree<-tree(Area ~ .,data=olive)
nd <- as.data.frame(t(colMeans(olive)))
predict(oltree,newdata=nd)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train=sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=FALSE)
trainSA=SAheart[train,]
testSA=SAheart[-train,]
set.seed(13234)
str(trainSA)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
modFit <- train(as.factor(chd) ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction>0.5)*1) != values)/length(values)}
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
prtrain <- predict(modFit,trainSA)
prtest <- predict(modFit, newdata=testSA)
head(prtrain)
str(prtrain)
missClass(trainSA,prtrain)
missClass(trainSA$chd,prtrain)
missClass(testSA$chd,prtest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
train <- vowel.train
train$y <- as.factor(train$y)
str(train)
test <- vowel.test
test$y <- as.factor(test$y)
set.seed(33833)
modFit <- train(y ~ ., data=train, method="rf")
!varImp
?varImp
varImp(modFit)
?train
installed.packages("ElemStatLearn")
installed.packages()
?installed.packages
varImp(modFit)
q()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
mod1 <- train(y=y,method="rf", data=vowel.train)
mod1 <- train(y ~.,method="rf", data=vowel.train)
mod2 <- train(y~., method="gbm", data=vowel.train)
installed.packages()
installed.packages(caret)
installed.packages("caret")
installed.packages("caret")$Version
installed.packages(field="Version")
installed.packages("caret", field="Version")
packageVersion("caret")
packageVersion("gbm")
mod2 <- train(y~., method="gbm", data=vowel.train)
mod2 <- train(y~., method="gbm", data=vowel.train, verbose=FALSE)
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
confusionMatrix(pred1,pred2)
agr <- pred1==pred2
confusionMatrix(pred2[agr,],vowel.test$y[agr,])
str(pred1)
confusionMatrix(pred2[agr,],vowel.test[agr,]$y)
str(agr)
head(pred2[agr,])
head(pred2[agr])
confusionMatrix(pred2[agr],vowel.test[agr,]$y)
library(caret)
library(gbm)
set.seed(3433)
libary(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
modrf <- train(diagnosis ~., method="rf", data=training)
modgbm <- train(diagnosis ~., method="gbm", verbose=FALSE)
modgbm <- train(diagnosis ~., method="gbm", data=training, verbose=FALSE)
modlda <- train(diagnosis ~., method="lda", data=training)
predrf <- predict(modrf,data=training)
predrf <- predict(modrf,training)
predgbm <- predict(modgbm, training)
predlda <- predict(modlda, training)
predDF <- data.fram(predrf,predgbm,predlda, diagnosis=training$diagnosis)
predDF <- data.frame(predrf,predgbm,predlda, diagnosis=training$diagnosis)
combmod <- train(diagnosis ~., method="rf", data=predDF)
predrft <- predict(modrf,newdata=testing)
predgbmt <- predict(modgbm, newdata=testing)
predlda <- predict(modlda, newdata=testing)
predldat <- predict(modlda, newdata=testing)
predDF <- data.frame(predrf,predgbm,predlda, diagnosis=training$diagnosis)
predlda <- predict(modlda, training)
predDF <- data.frame(predrf,predgbm,predlda, diagnosis=training$diagnosis)
combmod <- train(diagnosis ~., method="rf", data=predDF)
predldat <- predict(modlda, newdata=testing)
predDFt <- data.frame(predrf=predreft,predgbm=predgbmt,predlda=predldat)
predDFt <- data.frame(predrf=predrft,predgbm=predgbmt,predlda=predldat)
predcomb <- predict(combmod,predDFt)
accuracy(predcomb, testing$diagnosis)
confusionMatrix(predcomb, testing$diagnosis)
?confusionMatrix
confusionMatrix(predrft, testing$diagnosis)
confusionMatrix(predrgbm, testing$diagnosis)
confusionMatrix(predgbm, testing$diagnosis)
confusionMatrix(predgbmt, testing$diagnosis)
confusionMatrix(predldat, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain<- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training<-concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(233)
mod <- train(CompressiveStrength ~., method="lasso", data=training)
set.seed(233)
mod <- train(CompressiveStrength ~., method="lasso", data=training)
?plot.enet
plot.enet(mod)
mod
mod$finalFit
attr(mod)
?enet
str(training)
obj <- enet(subset(training, select=-c(CompressiveStrength),training$CompressiveStrength,lambda=0)
obj <- enet(subset(training, select=-c(CompressiveStrength)),training$CompressiveStrength,lambda=0)
obj <- enet(subset(training, select=-c(CompressiveStrength)),training$CompressiveStrength,lambda=0)
obj <- enet(subset(training, select=-c(CompressiveStrength)),training$CompressiveStrength,lambda=0)
obj <- enet(subset(training, select=-c(CompressiveStrength)),training$CompressiveStrength,lambda=0, trace=TRUE)
str(mod)
plot.enet(mod$finalModel)
plot.enet(mod$finalModel,xvar="penalty")
plot.enet(mod$finalModel,xvar="penalty",label=TRUE)
plot.enet(mod$finalModel,xvar="penalty")
set.seed(325)
install.packages("e1071")
install.packages("e1071")
library(e1071)
install.packages("e1071")
installed.packages("e1071")
modsvm <- svm(CompressiveStrength~., data=concrete)
library(e1071)
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
libary(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
library(caret)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(325)
library(e1071)
modsvm <- svm(CompressiveStrength ~., data=training)
pred <- predict(modsvm, newdata=testing)
summary(pred)
sqrt(sum((pred-testing$CompressiveStrength))^2
)
sqrt(sum((pred-testing$CompressiveStrength))^2/length(pred)
)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(325)
?svm
modsvm <- svm(CompressiveStrength ~., data=training)
pred <- predict(modsvm, testing)
sqrt(mean((pred-testing$CompressiveStrength)^2))
library(lubridate)
dat<- read.csv("~/Desktop/gaData.csv")
dat<- read.csv("C:\PostDoc\Coursera\DataScience\Practical Machine Learning\gaData.csv")
dat<- read.csv("C:\\PostDoc\\Coursera\\DataScience\\Practical Machine Learning\\gaData.csv")
training=dat[year(dat$data)<2012,]
training=dat[year(dat$date)<2012,]
testing=dat[(year(dat$date))>2011,]
tstrain=ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
modts <-bats(tstrain)
?forecast
forets <- forecast(modts)
forets
forets <- forecast(modts, level=c(95))
forets
head(testing)
forets$Lo 95
names(forets)
forets[1,]
forets[1]
str(forets)
forets$upper
training=dat[year(dat$date)<2011,]
tstrain=ts(training$visitsTumblr)
training=dat[year(dat$date)<2012,]
tstrain=ts(training$visitsTumblr)
modts <-bats(tstrain)
testing=dat[(year(dat$date))>2012,]
str(testing)
head(testing)
testing=dat[(year(dat$date))>2011,]
forets <- forecast(modts, level=c(95))
inside<-testing$visitsTumblr>=forets$lower || testing$visitsTumblr<=forets$upper
length(testing)
testing
length(testing$visitsTumblr)
forets <- forecast(modts, level=c(95),h=235)
inside<-testing$visitsTumblr>=forets$lower || testing$visitsTumblr<=forets$upper
length(inside)
inside<-testing$visitsTumblr>=forets$lower | testing$visitsTumblr<=forets$upper
length(inside)
sum(inside)
forets$lower
forets$upper
forets$upper-testing$visitsTumblr
out1<-(forets$upper-testing$visitsTumblr)<0
out2<-(-forets$lower+testing$visitsTumblr)<0
out1||out2
out<-out1|out2
length(out)
sum(out)
1-sum(out)/235
install.packages("devtools")
librar(devtools)
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
library(slidify)
install.packages("stringr")
install.packages("stringr")
library(slidify)
q()
install.packages("devtools")
devtools::install_github('rstudio/rsconnect')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='mangei11', token='C7948489AA349C77AAB810B7C2EA968F', secret='OB3NWm8Xw8iwi8jWbOmoUnBKfTKzwkoAmOz01hgf')
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("devtools")
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='mangei11', token='C7948489AA349C77AAB810B7C2EA968F', secret='OB3NWm8Xw8iwi8jWbOmoUnBKfTKzwkoAmOz01hgf')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
devtools::install_github(‘rstudio/shinyapps’)
library(shinyapps)
install.packages("devtools")
install.packages("devtools")
devtools::install_github(‘rstudio/shinyapps’)
libary(help=datasets)
library(help=datasets)
datasets(co2)
data(co2)
str(co2)
plot(co2)
head(co2)
plot(co2)
data(sleep)
str(sleep)
data(rivers)
str(rivers)
plot(rivers)
data(cars)
str(cars)
plot(cars)
data(trees)
str(trees)
pairs(trees)
setwd("C:/PostDoc/Coursera/DataScience/Developing Data Products/CourseProject/CP_SlidifyPres")
library(slidify)
library(knitr)
slidify('index.rmd')
slidify("index.Rmd")
slidify(index.Rmd)
setwd("C:/PostDoc/Coursera/DataScience/Developing Data Products/CourseProject/CP_SlidifyPres/CP_Pres")
slidify("index.Rmd")
browseUrl(index.html)
browseURL(index.html)
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
?points
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
kill.all()
clear.all()
?clear
?rm
rm(list=ls())
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
